diff --git a/node_modules/@react-navigation/native/lib/module/useLinking.js b/node_modules/@react-navigation/native/lib/module/useLinking.js
index ee1a4a5..4e9c151 100644
--- a/node_modules/@react-navigation/native/lib/module/useLinking.js
+++ b/node_modules/@react-navigation/native/lib/module/useLinking.js
@@ -168,12 +168,12 @@ export default function useLinking(ref, _ref) {
       // If it does we'll reset to that state object
       // Otherwise, we'll handle it like a regular deep link
 
-      const record = history.get(index);
+      // const record = history.get(index);
 
-      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {
-        navigation.resetRoot(record.state);
-        return;
-      }
+      // if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {
+      //   navigation.resetRoot(record.state);
+      //   return;
+      // }
 
       const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward
       // Otherwise the action will likely add items to history, which would mess things up
diff --git a/node_modules/@react-navigation/native/src/useLinking.tsx b/node_modules/@react-navigation/native/src/useLinking.tsx
index ef43f74..bdd815e 100644
--- a/node_modules/@react-navigation/native/src/useLinking.tsx
+++ b/node_modules/@react-navigation/native/src/useLinking.tsx
@@ -218,12 +218,12 @@ export default function useLinking(
       // When browser back/forward is clicked, we first need to check if state object for this index exists
       // If it does we'll reset to that state object
       // Otherwise, we'll handle it like a regular deep link
-      const record = history.get(index);
+      /* const record = history.get(index); */
 
-      if (record?.path === path && record?.state) {
-        navigation.resetRoot(record.state);
-        return;
-      }
+      /* if (record?.path === path && record?.state) { */
+      /*   navigation.resetRoot(record.state); */
+      /*   return; */
+      /* } */
 
       const state = getStateFromPathRef.current(path, configRef.current);
 
